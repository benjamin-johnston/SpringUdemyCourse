package com.luv2code.springdemo.rest;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;

//import javax.annotation.PostConstruct;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.luv2code.springdemo.entity.Student;

@RestController
@RequestMapping("/api")
public class StudentRestController {

	
	// define @PostConstruct to load the student data
	//Called only once when the bean is constructed

//Doesn't work for some reason
//	@PostConstruct
//	public void loadData() {
//		System.out.println("Inside loadData");
//		students = new ArrayList<>();
//		
//		students.add(new Student("Bob", "Dole"));
//		students.add(new Student("Harold", "More"));
//		students.add(new Student("Sally", "Doe"));
//	}
	
	//define endpoint for "/students" - return list of students
	
	@GetMapping("/students")
	public List<Student> getStudents() {
		List<Student> students = new ArrayList<>();
		
		students.add(new Student("Bob", "Dole"));
		students.add(new Student("Harold", "More"));
		students.add(new Student("Sally", "Doe"));
		
		return students;
	}
	
	//define endpoint for "/students/{studentId}" - return student at index
	
	@GetMapping("/students/{studentId}")
	public Student getStudent(@PathVariable int studentId) {
		List<Student> students = new ArrayList<>();
		
		students.add(new Student("Bob", "Dole"));
		students.add(new Student("Harold", "More"));
		students.add(new Student("Sally", "Doe"));
		
		if (studentId < 0 || studentId >= students.size())
			throw new StudentNotFoundException("Student id not found - " + studentId);
		
		return students.get(studentId);
	}
	
	@ExceptionHandler
	public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException e) {
		StudentErrorResponse errorResponse = new StudentErrorResponse();
		
		errorResponse.setStatus(HttpStatus.NOT_FOUND.value());
		errorResponse.setMessage(e.getMessage());
		errorResponse.setTimeStamp(System.currentTimeMillis());
		
		return new ResponseEntity(errorResponse, HttpStatus.NOT_FOUND);
	}
	
}
